{"version":3,"sources":["logo.svg","home.js","generator.js","footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","ciphertext","this","props","location","search","split","originalText","originalJson","cardsA","cardsB","CryptoJS","AES","decrypt","toString","enc","Utf8","JSON","parse","map","item","i","className","key","error","length","href","Component","Generator","copied","copyCodeToClipboard","textArea","select","document","execCommand","ToastsStore","success","onFinish","values","islinkgenerated","encrypt","stringify","setState","state","counter","linkgenerated","window","origin","date","Date","x","store","name","autoComplete","List","fields","add","remove","field","style","display","marginBottom","align","Item","fieldKey","rules","required","message","placeholder","MinusCircleOutlined","onClick","type","block","PlusOutlined","htmlType","ref","textarea","onChange","event","inputChangedHandler","value","Footer","App","console","log","exact","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b004536a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport CryptoJS from \"react-native-crypto-js\";\r\n\r\nexport default class Home extends Component {\r\n\r\n    render() {\r\n        const ciphertext = this.props.location.search.split('=')[1];\r\n        //console.log(this.props);\r\n        let originalText = \"Please generate the url\";\r\n        let originalJson = null;\r\n        let cardsA = [];\r\n        let cardsB = [];\r\n        if (ciphertext) {\r\n            try {\r\n                // Decrypt\r\n                let bytes = CryptoJS.AES.decrypt(ciphertext, 'secret key 123');\r\n                originalText = bytes.toString(CryptoJS.enc.Utf8);\r\n                originalJson = JSON.parse(originalText);\r\n    \r\n                //console.log(\"dECRYPT\");\r\n                //console.log(originalText); // 'my message'\r\n                //console.log(originalJson);\r\n                //decode\r\n                //check if its valid\r\n                //show\r\n                //console.log(this.props.location.search);\r\n                cardsA = originalJson['items'].map(function (item, i) {\r\n                    return <div className=\"feature\" key={item[\"ProductA\"]}>{item[\"category\"]} <span>{item[\"ProductA\"]}</span></div>;\r\n                });\r\n                cardsB = originalJson['items'].map(function (item, i) {\r\n                    return <div className=\"feature\" key={item[\"ProductA\"]}>{item[\"category\"]} <span>{item[\"ProductB\"]}</span></div>;\r\n                });\r\n            } catch (error) {\r\n                //console.log(error);\r\n            }\r\n\r\n        }\r\n\r\n\r\n         if (cardsA.length!==0 && cardsB.length!==0) {\r\n            return (\r\n                <div>\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12 mb-5\">\r\n                                <h2 className=\"main-head\">COMPARE</h2>\r\n                            </div>\r\n    \r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"pricing-table purple\">\r\n    \r\n                                    {/* <div className=\"pricing-label\">Fixed Price</div> */}\r\n                                    <h2>{originalJson[\"items\"][0][\"ProductA\"]}</h2>\r\n                                    <h5>Product Details</h5>\r\n                                    <div className=\"pricing-features\">\r\n                                        {cardsA}\r\n                                        {/* <div className=\"feature\">Bandwith<span>50 GB</span></div>\r\n                            <div className=\"feature\">Add-On Domains<span>10</span></div>\r\n                            <div className=\"feature\">SSD Storage<span>250 GB</span></div>\r\n                            <div className=\"feature\">Mail Adresses<span>25</span></div>\r\n                            <div className=\"feature\">Support<span>Only Mail</span></div> */}\r\n                                    </div>\r\n    \r\n                                    {/* <div className=\"price-tag\">\r\n                            <span className=\"symbol\">$</span>\r\n                            <span className=\"amount\">7.99</span>\r\n                            <span className=\"after\">/month</span>\r\n                            </div> */}\r\n    \r\n                                    <a className=\"price-button\" href=\"#\">BUY</a>\r\n                                </div>\r\n                            </div>\r\n    \r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"pricing-table purple\">\r\n    \r\n                                    {/* <div className=\"pricing-label\">Fixed Price</div> */}\r\n                                    <h2>{originalJson[\"items\"][0][\"ProductB\"]}</h2>\r\n                                    <h5>Product Details</h5>\r\n                                    <div className=\"pricing-features\">\r\n                                        {cardsB}\r\n                                        {/* <div className=\"feature\">Bandwith<span>50 GB</span></div>\r\n                            <div className=\"feature\">Add-On Domains<span>10</span></div>\r\n                            <div className=\"feature\">SSD Storage<span>250 GB</span></div>\r\n                            <div className=\"feature\">Mail Adresses<span>25</span></div>\r\n                            <div className=\"feature\">Support<span>Only Mail</span></div> */}\r\n                                    </div>\r\n    \r\n                                    {/* <div className=\"price-tag\">\r\n                            <span className=\"symbol\">$</span>\r\n                            <span className=\"amount\">7.99</span>\r\n                            <span className=\"after\">/month</span>\r\n                            </div> */}\r\n    \r\n                                    <a className=\"price-button\" href=\"#\">BUY</a>\r\n                                </div>\r\n                            </div>\r\n    \r\n    \r\n    \r\n                            <div className=\"col-md-12 mb-5\">\r\n                                \r\n                            </div>\r\n    \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n\r\n        } else {\r\n            return (<div>\r\n\r\n            </div>)\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Form, Input, Button, Space } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport CryptoJS from \"react-native-crypto-js\";\r\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\r\nimport {ToastsContainer, ToastsStore} from 'react-toasts';\r\nimport \"./generator.css\";\r\n\r\n\r\n\r\n\r\n\r\nexport default class Generator extends Component {\r\n  copied = false;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      counter: 1,\r\n      date: new Date(),\r\n      linkgenerated: null,\r\n    };\r\n    \r\n    // this.onFinish = this.onFinish.bind(this);\r\n  }\r\n  //   islinkgenerated=false;\r\n\r\n  // show_toast = (x) => {\r\n  //   this.setState((x)=>{});\r\n  //   if (this.copied) {\r\n  //     return (\"Copied Successfully!!\")\r\n  //   }\r\n  // };\r\n\r\n  copyCodeToClipboard = () => {\r\n    this.copied = true;\r\n    const el = this.textArea;\r\n    el.select()\r\n    document.execCommand(\"copy\");\r\n    //console.log(\"Copied to clipboard!\");\r\n    ToastsStore.success(\"Copied to clipboard!\");\r\n  }\r\n  \r\n  inputChangedHandler(x) {\r\n    //console.log(x);\r\n  }\r\n\r\n\r\n  onFinish = values => {\r\n\r\n    this.islinkgenerated = true;\r\n    //console.log('Received values of form:', values);\r\n    //console.log(typeof (values));\r\n    //console.log(JSON.stringify(values));\r\n    //console.log(typeof (JSON.stringify(values)));\r\n    //console.log(JSON.parse(JSON.stringify(values)));\r\n    // Encrypt\r\n    let ciphertext = CryptoJS.AES.encrypt(JSON.stringify(values), 'secret key 123').toString();\r\n\r\n    //console.log(\"Encrupted message\");\r\n    //console.log(ciphertext);\r\n    // Decrypt\r\n    let bytes = CryptoJS.AES.decrypt(ciphertext, 'secret key 123');\r\n    let originalText = bytes.toString(CryptoJS.enc.Utf8);\r\n\r\n    //console.log(\"dECRYPT\");\r\n    //console.log(originalText); // 'my message'\r\n    this.setState((state) => {\r\n      return { counter: state.counter + 1, linkgenerated: window.location.origin+\"?id=\" + ciphertext };\r\n    });\r\n\r\n    // this.setState=({linkgenerated :\"http://localhost:3000/\"+ciphertext});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ToastsContainer store={ToastsStore}/>\r\n        <div className=\"gen container\" >\r\n        <h2>COMPARE GENERATOR</h2>\r\n        <Form name=\"dynamic_form_nest_item\" onFinish={this.onFinish} autoComplete=\"off\">\r\n          <Form.List name=\"items\">\r\n            {(fields, { add, remove }) => {\r\n              return (\r\n                <div className=\"d-flex flex-column \">\r\n                  {fields.map(field => (\r\n                    <Space className=\"smallFlex\" key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"start\">\r\n                      <Form.Item\r\n                        className=\"FormItem\"\r\n                        // style={{\"width\" : \"300px\"}}\r\n                        {...field}\r\n                        name={[field.name, 'category']}\r\n                        fieldKey={[field.fieldKey, 'category']}\r\n                        rules={[{ required: true, message: 'Missing category name' }]}\r\n                      >\r\n                        <Input placeholder=\"Category Name\" />\r\n                      </Form.Item>\r\n                      <Form.Item\r\n                                              // style={{\"width\" : \"300px\"}}\r\n                                              \r\n\r\n                                              className=\"FormItem\"\r\n                        {...field}\r\n                        name={[field.name, 'ProductA']}\r\n                        fieldKey={[field.fieldKey, 'ProductA']}\r\n                        rules={[{ required: true, message: 'Missing Product A attribute value' }]}\r\n                      >\r\n                        <Input placeholder=\"Product A\" />\r\n                      </Form.Item>\r\n                      <Form.Item\r\n                      \r\n                                              // style={{\"width\" : \"300px\"}}\r\n                                              className=\"FormItem\"\r\n                        {...field}\r\n                        name={[field.name, 'ProductB']}\r\n                        fieldKey={[field.fieldKey, 'ProductB']}\r\n                        rules={[{ required: true, message: 'Missing Product B attribute value' }]}\r\n                      >\r\n                        <Input placeholder=\"Product B\" />\r\n                      </Form.Item>\r\n\r\n                      <MinusCircleOutlined\r\n                        onClick={() => {\r\n                          remove(field.name);\r\n                        }}\r\n                      />\r\n                    </Space>\r\n\r\n\r\n                  ))}\r\n\r\n                  <Form.Item>\r\n                    <Button\r\n                      type=\"dashed\"\r\n                      onClick={() => {\r\n                        add();\r\n                      }}\r\n                      block\r\n                    >\r\n                      <PlusOutlined /> Add field\r\n                        </Button>\r\n                  </Form.Item>\r\n                </div>\r\n              );\r\n            }}\r\n          </Form.List>\r\n\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n                </Button>\r\n          </Form.Item>\r\n\r\n\r\n        </Form>\r\n        {/* <p>Link generated : {this.state.linkgenerated == null ? \"Not YET\" : this.state.linkgenerated}</p> */}\r\n\r\n        <div onClick={() => this.copyCodeToClipboard()}>\r\n          <p>Double click here to copy the url.</p>\r\n          <textarea\r\n            ref={(textarea) => this.textArea = textarea}\r\n            onChange={(event)=>this.inputChangedHandler(event)}\r\n            value={this.state.linkgenerated?this.state.linkgenerated:\"Please submit your data to generate your url.\"}\r\n          />\r\n          {/* {this.show_toast} */}\r\n        </div>\r\n\r\n\r\n\r\n        </div>\r\n        \r\n        {/* <Link to={this.state.linkgenerated?this.state.linkgenerated:'/test'}> */}\r\n        {/* </Link> */}\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"py-5 bg-light\">\r\n                    <div className=\"container text-center\">\r\n                            <p className=\"text-secondary col-md-9 mx-auto\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Eum ducimus soluta veritatis sunt est veniam, rem neque impedit rerum aliquid iste  dolores laboriosam?</p>\r\n                            <hr className=\"my-5\" />\r\n                                <div className=\"mb-3\">\r\n                                    <p className=\"mx-1\">\r\n\r\n                                    </p>\r\n                                    <p className=\"w-6 mx-1\">\r\n\r\n                                    </p>\r\n                                    <p className=\"w-6 mx-1\">\r\n\r\n                                    </p>\r\n                                    <p className=\"w-6 mx-1\">\r\n\r\n                                    </p>\r\n                                    <p className=\"w-6 mx-1\">\r\n\r\n                                    </p>\r\n                                </div>\r\n                                <p className=\"text-secondary\">Copyright 2020. All rights reserved!</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport Home from './home';\nimport Generator from './generator';\nimport Footer from './footer';\n\n\nfunction App() {\n  console.log(document.location);\n  return (\n\n    <BrowserRouter>\n    <div className=\"App\">\n      <Route exact path=\"/comparer/generator\" component={Generator}/>\n      <Route exact path=\"/comparer/:i\" component={Home}/>\n      <Route exact path=\"/comparer/\" component={Home}/>\n\n      <Footer />\n    </div>\n\n    </BrowserRouter> \n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}